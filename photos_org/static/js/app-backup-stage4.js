

/**
 * ÂÆ∂Â∫≠ÂçïÊú∫ÁâàÊô∫ËÉΩÁÖßÁâáÊï¥ÁêÜÁ≥ªÁªü - ‰∏ªÂ∫îÁî®ËÑöÊú¨
 */

// Ê≥®ÊÑèÔºöCONFIG, AppState, searchTypePlaceholders, searchScopeHints Â∑≤ÁßªËá≥ app-data.js

// DOM ÂÖÉÁ¥†ÁºìÂ≠ò
let elements = {};

// ÂàùÂßãÂåñÂ∫îÁî®
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

// Ê≥®ÊÑèÔºöloadHotData ÂáΩÊï∞Â∑≤ÁßªËá≥ app-data.js

function initializeApp() {
    console.log('üöÄ ÂàùÂßãÂåñÂÆ∂Â∫≠ÂçïÊú∫ÁâàÊô∫ËÉΩÁÖßÁâáÊï¥ÁêÜÁ≥ªÁªü');

    // ÁºìÂ≠òDOMÂÖÉÁ¥†
    cacheElements();

    // ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
    bindEvents();

    // ÂàùÂßãÂåñUIÁªÑ‰ª∂
    initializeUI();
    
    // Âä†ËΩΩÁÉ≠Èó®Êï∞ÊçÆ
    loadHotData();

    // Âä†ËΩΩÂàùÂßãÊï∞ÊçÆ
    loadInitialData();

    // ËÆæÁΩÆÂÆöÊúüÂà∑Êñ∞
    setupAutoRefresh();
}

function cacheElements() {
    console.log('üìã ÁºìÂ≠òDOMÂÖÉÁ¥†');

    elements = {
        // ÂØºËà™
        navPhotos: document.getElementById('navPhotos'),

        // Êìç‰ΩúÊåâÈíÆ
        importBtn: document.getElementById('importBtn'),
        batchBtn: document.getElementById('batchBtn'),

        // ÊêúÁ¥¢ÂíåÁ≠õÈÄâ
        searchInput: document.getElementById('searchInput'),
        searchBtn: document.getElementById('searchBtn'),
    searchType: document.getElementById('searchType'),
    searchScopeHint: document.getElementById('searchScopeHint'),
    searchSuggestions: document.getElementById('searchSuggestions'),
        dateFilter: document.getElementById('dateFilter'),
        customDateRange: document.getElementById('customDateRange'),
        startDate: document.getElementById('startDate'),
        endDate: document.getElementById('endDate'),
        qualityFilter: document.getElementById('qualityFilter'),
        sortBy: document.getElementById('sortBy'),
        sortOrder: document.getElementById('sortOrder'),
        clearFilters: document.getElementById('clearFilters'),
        clearFiltersSmall: document.getElementById('clearFiltersSmall'),
        filterStatus: document.getElementById('filterStatus'),
        filterStatusText: document.getElementById('filterStatusText'),

        // ËßÜÂõæÂàáÊç¢
        gridView: document.getElementById('gridView'),
        listView: document.getElementById('listView'),

        // ÁªüËÆ°‰ø°ÊÅØ
        statsRow: document.getElementById('statsRow'),

        // ÁÖßÁâáÂå∫Âüü
        photoCount: document.getElementById('photoCount'),
        loadingIndicator: document.getElementById('loadingIndicator'),
        emptyState: document.getElementById('emptyState'),
        photosGrid: document.getElementById('photosGrid'),
        paginationContainer: document.getElementById('paginationContainer'),
        pagination: document.getElementById('pagination'),

        // ÈÄâÊã©Êìç‰Ωú
        selectAllBtn: document.getElementById('selectAllBtn'),
        clearSelectionBtn: document.getElementById('clearSelectionBtn'),
        deleteSelectedBtn: document.getElementById('deleteSelectedBtn'),

        // Ê®°ÊÄÅÊ°Ü
        photoModal: document.getElementById('photoModal'),
        importModal: document.getElementById('importModal'),
        batchModal: document.getElementById('batchModal'),

        // ÂØºÂÖ•Áõ∏ÂÖ≥
        photoFiles: document.getElementById('photoFiles'),
        startImportBtn: document.getElementById('startImportBtn'),
        importFirstBtn: document.getElementById('importFirstBtn'),
        importProgress: document.getElementById('importProgress'),
        importProgressBar: document.getElementById('importProgressBar'),
        importStatus: document.getElementById('importStatus'),
        
        // ÂØºÂÖ•ÊñπÂºèÂàáÊç¢
        fileImport: document.getElementById('fileImport'),
        folderImport: document.getElementById('folderImport'),
        fileImportSection: document.getElementById('fileImportSection'),
        folderImportSection: document.getElementById('folderImportSection'),
        folderPath: document.getElementById('folderPath'),
        browseFolderBtn: document.getElementById('browseFolderBtn'),
        recursiveScan: document.getElementById('recursiveScan'),

        // ÊâπÈáèÂ§ÑÁêÜÁõ∏ÂÖ≥
        startBatchBtn: document.getElementById('startBatchBtn'),
        batchProgress: document.getElementById('batchProgress'),
        batchProgressBar: document.getElementById('batchProgressBar'),
        batchStatus: document.getElementById('batchStatus')
    };
}

function bindEvents() {
    console.log('üîó ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®');

    // ÂØºËà™‰∫ã‰ª∂
    elements.navPhotos.addEventListener('click', (e) => {
        e.preventDefault();
        switchSection('photos');
    });

    // ÊêúÁ¥¢‰∫ã‰ª∂
    elements.searchInput.addEventListener('input', debounce(handleSearch, CONFIG.DEBOUNCE_DELAY));
    elements.searchBtn.addEventListener('click', handleSearch);
    elements.searchType.addEventListener('change', handleSearchTypeChange);
    elements.dateFilter.addEventListener('change', handleDateFilterChange);
    elements.qualityFilter.addEventListener('change', handleFilterChange);
    elements.sortBy.addEventListener('change', handleSortChange);
    elements.sortOrder.addEventListener('change', handleSortChange);
    elements.startDate.addEventListener('change', handleCustomDateChange);
    elements.endDate.addEventListener('change', handleCustomDateChange);
    elements.clearFilters.addEventListener('click', clearAllFilters);
    elements.clearFiltersSmall.addEventListener('click', clearAllFilters);

    // ËßÜÂõæÂàáÊç¢‰∫ã‰ª∂
    elements.gridView.addEventListener('change', () => switchView('grid'));
    elements.listView.addEventListener('change', () => switchView('list'));

    // ÂØºÂÖ•‰∫ã‰ª∂
    // Ê≥®ÊÑèÔºöimportBtn Âíå batchBtn ‰ΩøÁî® data-bs-toggle="modal" Ëá™Âä®Â§ÑÁêÜÔºå‰∏çÈúÄË¶ÅÊâãÂä®ÁõëÂê¨
    elements.importFirstBtn.addEventListener('click', showImportModal);
    elements.photoFiles.addEventListener('change', handleFileSelection);
    elements.startImportBtn.addEventListener('click', startImport);
    
    // ÂØºÂÖ•ÊñπÂºèÂàáÊç¢‰∫ã‰ª∂
    elements.fileImport.addEventListener('change', () => switchImportMethod('file'));
    elements.folderImport.addEventListener('change', () => switchImportMethod('folder'));
    elements.folderPath.addEventListener('input', handleFolderPathChange);
    elements.browseFolderBtn.addEventListener('click', browseFolder);
    
    // ÁªëÂÆöÊñá‰ª∂Â§πÈÄâÊã©‰∫ã‰ª∂
    const folderFilesInput = document.getElementById('folderFiles');
    if (folderFilesInput) {
        folderFilesInput.addEventListener('change', handleFolderSelection);
    }

    // ÊâπÈáèÂ§ÑÁêÜ‰∫ã‰ª∂
    // Ê≥®ÊÑèÔºöbatchBtn ‰ΩøÁî® data-bs-toggle="modal" Ëá™Âä®Â§ÑÁêÜÔºå‰∏çÈúÄË¶ÅÊâãÂä®ÁõëÂê¨
    elements.startBatchBtn.addEventListener('click', startBatchProcess);
    
    // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
    console.log('ÊâπÈáèÂ§ÑÁêÜÊåâÈíÆÁªëÂÆöÁä∂ÊÄÅ:', {
        batchBtn: !!elements.batchBtn,
        startBatchBtn: !!elements.startBatchBtn
    });

    // ÈÄâÊã©Êìç‰Ωú‰∫ã‰ª∂
    elements.selectAllBtn.addEventListener('click', selectAllPhotos);
    elements.clearSelectionBtn.addEventListener('click', clearSelection);
    elements.deleteSelectedBtn.addEventListener('click', deleteSelectedPhotos);

    // ÈîÆÁõòÂø´Êç∑ÈîÆ
    document.addEventListener('keydown', handleKeyboard);
}

// Ê≥®ÊÑèÔºöinitializeUI ÂáΩÊï∞Â∑≤ÁßªËá≥ app-ui.js

function loadInitialData() {
    console.log('üìä Âä†ËΩΩÂàùÂßãÊï∞ÊçÆ');

    // Âä†ËΩΩÁªüËÆ°‰ø°ÊÅØ
    loadStats();

    // Âä†ËΩΩÁ¨¨‰∏ÄÈ°µÁÖßÁâá
    loadPhotos(1);
}

function setupAutoRefresh() {
    // ÊØè5ÂàÜÈíüËá™Âä®Âà∑Êñ∞ÁªüËÆ°‰ø°ÊÅØ
    setInterval(() => {
        loadStats();
    }, 5 * 60 * 1000);
}

// Ê≥®ÊÑèÔºöÊêúÁ¥¢ÂíåÁ≠õÈÄâÂáΩÊï∞Â∑≤ÁßªËá≥ app-data.js

// Ê≥®ÊÑèÔºöswitchView, showImportModal, showBatchModal ÂáΩÊï∞Â∑≤ÁßªËá≥ app-ui.js

function handleFileSelection(event) {
    const files = event.target.files;
    const hasFiles = files && files.length > 0;

    elements.startImportBtn.disabled = !hasFiles;

    if (hasFiles) {
        elements.startImportBtn.textContent = `ÂºÄÂßãÂØºÂÖ• (${files.length} ‰∏™Êñá‰ª∂)`;
    } else {
        elements.startImportBtn.textContent = 'ÂºÄÂßãÂØºÂÖ•';
    }
}

function handleKeyboard(event) {
    // Ctrl+A ÂÖ®ÈÄâ
    if (event.ctrlKey && event.key === 'a') {
        event.preventDefault();
        selectAllPhotos();
    }

    // Delete ÈîÆÂà†Èô§ÈÄâ‰∏≠ÁÖßÁâá
    if (event.key === 'Delete' && AppState.selectedPhotos.size > 0) {
        deleteSelectedPhotos();
    }

    // Escape ÈîÆÂèñÊ∂àÈÄâÊã©
    if (event.key === 'Escape') {
        clearSelection();
    }
}

// Ê≥®ÊÑèÔºöÊï∞ÊçÆÂä†ËΩΩÂáΩÊï∞ loadStats, loadPhotos Â∑≤ÁßªËá≥ app-data.js

// Ê≥®ÊÑèÔºöÊ∏≤ÊüìÂáΩÊï∞Â∑≤ÁßªËá≥ app-data.js

// Ê≥®ÊÑèÔºörenderPhotos, renderGridView, renderListView Â∑≤ÁßªËá≥ app-data.js

function createPhotoCard(photo) {
    const allTags = photo.tags || [];
    const visibleTags = allTags.slice(0, 5);
    const hiddenTagsCount = allTags.length - 5;
    
    const visibleTagsHtml = visibleTags.map(tag =>
        `<span class="photo-tag">${tag}</span>`
    ).join('');
    
    const hiddenTagsHtml = allTags.slice(5).map(tag =>
        `<span class="photo-tag">${tag}</span>`
    ).join('');

    // Ëé∑ÂèñË¥®Èáè‰ø°ÊÅØ
    const qualityLevel = photo.quality?.level || photo.analysis?.quality_rating || '';
    const qualityClass = getQualityClass(qualityLevel);
    const qualityText = getQualityText(qualityLevel);

    return `
        <div class="col-1 photo-card" data-photo-id="${photo.id}">
            <div class="photo-image-container">
                <img src="/${(photo.thumbnail_path || CONFIG.IMAGE_PLACEHOLDER).replace(/\\/g, '/')}"
                     alt="${photo.filename}"
                     class="photo-image"
                     loading="lazy">
                <div class="photo-overlay">
                    <i class="bi bi-eye text-white" style="font-size: 2rem;"></i>
                </div>
            </div>
            <div class="photo-info">
                <div class="photo-title">${photo.filename}</div>
                <div class="photo-meta">
                    <i class="bi bi-calendar me-1"></i>${formatDate(photo.taken_at)} (ÊãçÊëÑÊó•Êúü)
                </div>
                <div class="photo-tags">
                    <div class="visible-tags">
                        ${visibleTagsHtml}
                    </div>
                    ${hiddenTagsCount > 0 ? `
                        <div class="hidden-tags" style="display: none;">
                            ${hiddenTagsHtml}
                        </div>
                        <span class="tag-toggle" onclick="toggleTags(this, event)" data-photo-id="${photo.id}">
                            +${hiddenTagsCount} Êõ¥Â§ö
                        </span>
                    ` : ''}
                </div>
                <div class="photo-quality ${qualityClass}">
                    ${qualityText}
                </div>
            </div>
        </div>
    `;
}

function createPhotoListItem(photo) {
    const allTags = photo.tags || [];
    const visibleTags = allTags.slice(0, 5);
    const hiddenTagsCount = allTags.length - 5;
    
    const visibleTagsHtml = visibleTags.map(tag =>
        `<span class="badge bg-secondary me-1 mb-1">${tag}</span>`
    ).join('');
    
    const hiddenTagsHtml = allTags.slice(5).map(tag =>
        `<span class="badge bg-secondary me-1 mb-1">${tag}</span>`
    ).join('');

    const qualityClass = getQualityClass(photo.quality?.level || '');
    const qualityText = getQualityText(photo.quality?.level || '');

    // Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
    const formatFileSize = (bytes) => {
        if (!bytes) return 'Êú™Áü•';
        const units = ['B', 'KB', 'MB', 'GB'];
        let size = bytes;
        let unitIndex = 0;
        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        return `${size.toFixed(1)} ${units[unitIndex]}`;
    };

    // Ê†ºÂºèÂåñÂàÜËæ®Áéá
    const resolution = photo.width && photo.height ? `${photo.width} √ó ${photo.height}` : 'Êú™Áü•';

    return `
        <div class="photo-list-item" data-photo-id="${photo.id}">
            <div class="photo-thumbnail-container">
                <img src="/${(photo.thumbnail_path || CONFIG.IMAGE_PLACEHOLDER).replace(/\\/g, '/')}"
                     alt="${photo.filename}"
                     class="photo-thumbnail">
                <div class="photo-overlay">
                    <i class="bi bi-eye text-white"></i>
                </div>
            </div>
            <div class="photo-details">
                <div class="photo-header">
                    <div class="photo-title">${photo.filename}</div>
                    <div class="photo-actions">
                        <span class="badge ${qualityClass}">${qualityText}</span>
                    </div>
                </div>
                <div class="photo-meta">
                    <div class="meta-row">
                        <span class="meta-item">
                            <i class="bi bi-calendar me-1"></i>
                            ${formatDate(photo.taken_at)} (ÊãçÊëÑÊó•Êúü)
                        </span>
                        <span class="meta-item">
                            <i class="bi bi-geo-alt me-1"></i>
                            ${photo.location_name || 'Êú™Áü•‰ΩçÁΩÆ'}
                        </span>
                        <span class="meta-item">
                            <i class="bi bi-camera me-1"></i>
                            ${photo.camera_make || 'Êú™Áü•'} ${photo.camera_model || ''}
                        </span>
                    </div>
                    <div class="meta-row">
                        <span class="meta-item">
                            <i class="bi bi-image me-1"></i>
                            ${resolution}
                        </span>
                        <span class="meta-item">
                            <i class="bi bi-file-earmark me-1"></i>
                            ${formatFileSize(photo.file_size)}
                        </span>
                        <span class="meta-item">
                            <i class="bi bi-clock me-1"></i>
                            ${formatDateTime(photo.created_at)}
                        </span>
                    </div>
                </div>
                <div class="photo-description">
                    ${photo.analysis?.description || 'ÊöÇÊó†ÊèèËø∞'}
                </div>
                <div class="photo-tags">
                    <div class="visible-tags">
                        ${visibleTagsHtml}
                    </div>
                    ${hiddenTagsCount > 0 ? `
                        <div class="hidden-tags" style="display: none;">
                            ${hiddenTagsHtml}
                        </div>
                        <span class="tag-toggle" onclick="toggleTags(this, event)" data-photo-id="${photo.id}">
                            +${hiddenTagsCount} Êõ¥Â§ö
                        </span>
                    ` : ''}
                </div>
            </div>
        </div>
    `;
}

// Ê≥®ÊÑèÔºörenderPagination Â∑≤ÁßªËá≥ app-data.js

// Ê≥®ÊÑèÔºöshowPhotoDetail, createPhotoDetailModal ÂáΩÊï∞Â∑≤ÁßªËá≥ app-ui.js

// ============ ÂØºÂÖ•ÂäüËÉΩ ============

function switchImportMethod(method) {
    console.log('ÂàáÊç¢ÂØºÂÖ•ÊñπÂºè:', method);
    
    if (method === 'file') {
        elements.fileImportSection.classList.remove('d-none');
        elements.folderImportSection.classList.add('d-none');
        elements.startImportBtn.disabled = elements.photoFiles.files.length === 0;
    } else if (method === 'folder') {
        elements.fileImportSection.classList.add('d-none');
        elements.folderImportSection.classList.remove('d-none');
        elements.startImportBtn.disabled = !elements.folderPath.value.trim();
    }
}

function handleFolderPathChange() {
    const hasPath = elements.folderPath.value.trim().length > 0;
    elements.startImportBtn.disabled = !hasPath;
    
    if (hasPath) {
        elements.startImportBtn.textContent = 'ÂºÄÂßãÊâ´ÊèèÂØºÂÖ•';
    } else {
        elements.startImportBtn.textContent = 'ÂºÄÂßãÂØºÂÖ•';
    }
}

function browseFolder() {
    // Ëß¶ÂèëÈöêËóèÁöÑÊñá‰ª∂Â§πÈÄâÊã©ËæìÂÖ•Ê°Ü
    const folderFilesInput = document.getElementById('folderFiles');
    if (folderFilesInput) {
        folderFilesInput.click();
    }
}

function handleFolderSelection(event) {
    /**
     * Â§ÑÁêÜÊñá‰ª∂Â§πÈÄâÊã©‰∫ã‰ª∂
     * 
     * @param {Event} event - Êñá‰ª∂ÈÄâÊã©‰∫ã‰ª∂
     */
    console.log('üìÅ Êñá‰ª∂Â§πÈÄâÊã©‰∫ã‰ª∂Ëß¶Âèë');
    const files = event.target.files;
    console.log('ÈÄâÊã©ÁöÑÊñá‰ª∂Êï∞Èáè:', files?.length || 0);
    
    if (files && files.length > 0) {
        // Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Êñá‰ª∂ÁöÑË∑ØÂæÑÔºåÂéªÊéâÊñá‰ª∂ÂêçÂæóÂà∞Êñá‰ª∂Â§πË∑ØÂæÑ
        const firstFile = files[0];
        const filePath = firstFile.webkitRelativePath || firstFile.name;
        const folderPath = filePath.substring(0, filePath.lastIndexOf('/'));
        
        console.log('Êñá‰ª∂Â§πË∑ØÂæÑ:', folderPath);
        
        // ÊòæÁ§∫Êñá‰ª∂Â§πË∑ØÂæÑ
        elements.folderPath.value = folderPath;
        
        // ÊòæÁ§∫ÈÄâÊã©ÁöÑÊñá‰ª∂Êï∞Èáè
        const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
        console.log(`ÈÄâÊã©‰∫ÜÊñá‰ª∂Â§πÔºåÂåÖÂê´ ${imageFiles.length} ‰∏™ÂõæÁâáÊñá‰ª∂`);
        
        // Êõ¥Êñ∞ÂØºÂÖ•ÊåâÈíÆÁä∂ÊÄÅ
        handleFolderPathChange();
        
        // ÊòæÁ§∫ÈÄâÊã©ÁªìÊûú
        showSuccess(`Â∑≤ÈÄâÊã©Êñá‰ª∂Â§πÔºåÂèëÁé∞ ${imageFiles.length} ‰∏™ÂõæÁâáÊñá‰ª∂`);
        
        // Ëá™Âä®ÂºÄÂßãÂØºÂÖ•
        console.log('üöÄ ÂáÜÂ§áËá™Âä®ÂºÄÂßãÊñá‰ª∂Â§πÂØºÂÖ•...');
        console.log('CONFIG ÂØπË±°:', window.CONFIG);
        console.log('AppState ÂØπË±°:', window.AppState);
        
        // Á°Æ‰øùÂØºÂÖ•ÊñπÂºèËÆæÁΩÆ‰∏∫Êñá‰ª∂Â§π
        const folderRadio = document.querySelector('input[name="importMethod"][value="folder"]');
        if (folderRadio) {
            folderRadio.checked = true;
            console.log('‚úÖ Â∑≤ËÆæÁΩÆÂØºÂÖ•ÊñπÂºè‰∏∫Êñá‰ª∂Â§π');
        } else {
            console.error('‚ùå Êâæ‰∏çÂà∞Êñá‰ª∂Â§πÂØºÂÖ•ÂçïÈÄâÊåâÈíÆ');
        }
        
        setTimeout(() => {
            console.log('‚è∞ Âª∂ËøüÂêéÂºÄÂßãÊâßË°åÊñá‰ª∂Â§πÂØºÂÖ•...');
            startFolderImport();
        }, 1000); // Â¢ûÂä†Âª∂ËøüÊó∂Èó¥Âà∞1Áßí
    } else {
        console.log('‚ùå Ê≤°ÊúâÈÄâÊã©‰ªª‰ΩïÊñá‰ª∂');
    }
}

function validateFolderPath(path) {
    /**
     * È™åËØÅÊñá‰ª∂Â§πË∑ØÂæÑÊ†ºÂºè
     * 
     * @param {string} path - Ë∑ØÂæÑÂ≠óÁ¨¶‰∏≤
     * @returns {boolean} ÊòØÂê¶ÊúâÊïà
     */
    if (!path || path.trim().length === 0) {
        return false;
    }
    
    // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÈùûÊ≥ïÂ≠óÁ¨¶
    const invalidChars = /[<>:"|?*]/;
    if (invalidChars.test(path)) {
        return false;
    }
    
    // Ê£ÄÊü•Ë∑ØÂæÑÈïøÂ∫¶
    if (path.length > 260) {
        return false;
    }
    
    // Ê£ÄÊü•ÊòØÂê¶‰ª•È©±Âä®Âô®Â≠óÊØçÂºÄÂ§¥ÔºàWindowsÔºâÊàñÊ†πÁõÆÂΩïÂºÄÂ§¥ÔºàLinux/MacÔºâ
    const windowsPattern = /^[A-Za-z]:\\/;
    const unixPattern = /^\//;
    
    return windowsPattern.test(path) || unixPattern.test(path);
}

async function startImport() {
    console.log('üöÄ ÂºÄÂßãÂØºÂÖ•ÔºåÊ£ÄÊü•ÈÖçÁΩÆÂíåÁä∂ÊÄÅ...');
    console.log('CONFIG ÂØπË±°:', window.CONFIG);
    console.log('AppState ÂØπË±°:', window.AppState);
    
    const importMethod = document.querySelector('input[name="importMethod"]:checked').value;
    console.log('ÈÄâÊã©ÁöÑÂØºÂÖ•ÊñπÂºè:', importMethod);
    
    if (importMethod === 'file') {
        console.log('ÊâßË°åÊñá‰ª∂ÂØºÂÖ•...');
        await startFileImport();
    } else if (importMethod === 'folder') {
        console.log('ÊâßË°åÊñá‰ª∂Â§πÂØºÂÖ•...');
        await startFolderImport();
    } else {
        console.error('Êú™Áü•ÁöÑÂØºÂÖ•ÊñπÂºè:', importMethod);
        showError('Êú™Áü•ÁöÑÂØºÂÖ•ÊñπÂºèÔºåËØ∑ÈáçÊñ∞ÈÄâÊã©');
    }
}

async function startFileImport() {
    console.log('ÂºÄÂßãÊñá‰ª∂ÂØºÂÖ•');
    const files = elements.photoFiles.files;
    
    if (files.length === 0) {
        showError('ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂØºÂÖ•ÁöÑÁÖßÁâáÊñá‰ª∂');
        return;
    }
    
    // ÊòæÁ§∫ËøõÂ∫¶
    elements.importProgress.classList.remove('d-none');
    elements.startImportBtn.disabled = true;
    
    try {
        const formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append('files', files[i]);
        }
        
        const response = await fetch(`${CONFIG.API_BASE_URL}/import/upload`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            const importedCount = data.data.imported_photos || 0;
            const totalFiles = data.data.total_files || files.length;
            const failedFiles = data.data.failed_files || [];
            
            // ÊòæÁ§∫ÂØºÂÖ•ÁªìÊûú
            console.log('ÂØºÂÖ•ÁªìÊûúÂ§ÑÁêÜ - Êñ∞ÁâàÊú¨‰ª£Á†ÅÂ∑≤Âä†ËΩΩ'); // Ë∞ÉËØï‰ø°ÊÅØ
            if (failedFiles.length > 0) {
                // ÂàÜÁ±ªÊòæÁ§∫Â§±Ë¥•Êñá‰ª∂
                const duplicateFiles = [];
                const errorFiles = [];
                
                failedFiles.forEach(f => {
                    if (f.includes('Êñá‰ª∂Â∑≤Â≠òÂú®') || f.includes('ÈáçÂ§ç')) {
                        duplicateFiles.push(f);
                    } else {
                        errorFiles.push(f);
                    }
                });
                
                let message = `ÈÉ®ÂàÜÂØºÂÖ•ÊàêÂäüÔºö${importedCount}/${totalFiles} Âº†ÁÖßÁâá`;
                
                if (duplicateFiles.length > 0) {
                    const duplicateList = duplicateFiles.map(f => `‚Ä¢ ${f}`).join('\n');
                    message += `\n\nÈáçÂ§çÊñá‰ª∂ÔºàÂ∑≤Ë∑≥ËøáÔºâÔºö\n${duplicateList}`;
                }
                
                if (errorFiles.length > 0) {
                    const errorList = errorFiles.map(f => `‚Ä¢ ${f}`).join('\n');
                    message += `\n\nÂ§ÑÁêÜÂ§±Ë¥•ÁöÑÊñá‰ª∂Ôºö\n${errorList}`;
                }
                
                showWarning(message);
            } else {
                showSuccess(`ÊàêÂäüÂØºÂÖ• ${importedCount} Âº†ÁÖßÁâáÔºÅ\n\nËØ∑ÊâãÂä®ÁÇπÂáª"ÊâπÈáèÂ§ÑÁêÜ"ÊåâÈíÆËøõË°åÊô∫ËÉΩÂàÜÊûê„ÄÇ`);
            }
            
            // ÈáçÊñ∞Âä†ËΩΩÁÖßÁâáÂàóË°®
            await loadPhotos();
            // ÂÖ≥Èó≠ÂØºÂÖ•Ê®°ÊÄÅÊ°Ü
            const modal = bootstrap.Modal.getInstance(elements.importModal);
            if (modal) {
                modal.hide();
            }
        } else {
            showError(data.message || 'ÂØºÂÖ•Â§±Ë¥•');
        }
    } catch (error) {
        console.error('Êñá‰ª∂ÂØºÂÖ•Â§±Ë¥•:', error);
        showError('Êñá‰ª∂ÂØºÂÖ•Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
    } finally {
        elements.importProgress.classList.add('d-none');
        elements.startImportBtn.disabled = false;
    }
}

async function startFolderImport() {
    console.log('ÂºÄÂßãÁõÆÂΩïÊâ´ÊèèÂØºÂÖ•');
    console.log('CONFIG.API_BASE_URL:', window.CONFIG?.API_BASE_URL);
    
    // Ëé∑ÂèñÈÄâÊã©ÁöÑÊñá‰ª∂
    const folderFilesInput = document.getElementById('folderFiles');
    console.log('Êñá‰ª∂Â§πËæìÂÖ•Ê°Ü:', folderFilesInput);
    const files = folderFilesInput.files;
    console.log('ÈÄâÊã©ÁöÑÊñá‰ª∂Êï∞Èáè:', files?.length || 0);
    
    if (!files || files.length === 0) {
        console.error('Ê≤°ÊúâÈÄâÊã©Êñá‰ª∂');
        showError('ËØ∑ÂÖàÈÄâÊã©ÁÖßÁâáÁõÆÂΩï');
        return;
    }
    
    // ËøáÊª§Âá∫ÂõæÁâáÊñá‰ª∂
    const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
    
    if (imageFiles.length === 0) {
        showError('ÈÄâÊã©ÁöÑÁõÆÂΩï‰∏≠Ê≤°ÊúâÊâæÂà∞ÂõæÁâáÊñá‰ª∂');
        return;
    }
    
    // ÊòæÁ§∫ËøõÂ∫¶
    elements.importProgress.classList.remove('d-none');
    elements.startImportBtn.disabled = true;
    elements.importStatus.textContent = `Ê≠£Âú®Â§ÑÁêÜ ${imageFiles.length} ‰∏™ÂõæÁâáÊñá‰ª∂...`;
    
    try {
        // Áõ¥Êé•‰ΩøÁî®Êñá‰ª∂‰∏ä‰º†APIÂ§ÑÁêÜÈÄâÊã©ÁöÑÊñá‰ª∂
        const formData = new FormData();
        imageFiles.forEach(file => {
            formData.append('files', file);
        });
        
        const apiUrl = `${window.CONFIG.API_BASE_URL}/import/upload`;
        console.log('API URL:', apiUrl);
        console.log('ÂèëÈÄÅÁöÑÊñá‰ª∂Êï∞Èáè:', imageFiles.length);
        
        const response = await fetch(apiUrl, {
            method: 'POST',
            body: formData
        });
        
        console.log('APIÂìçÂ∫îÁä∂ÊÄÅ:', response.status);
        
        const data = await response.json();
        
        if (data.success) {
            const importedCount = data.data.imported_photos || 0;
            const totalFiles = data.data.total_files || imageFiles.length;
            const failedFiles = data.data.failed_files || [];
            
            // Áõ¥Êé•Â§ÑÁêÜÂÆåÊàê
            if (failedFiles.length > 0) {
                const failedList = failedFiles.slice(0, 10).map(f => `‚Ä¢ ${f}`).join('\n');
                const moreText = failedFiles.length > 10 ? `\n... ËøòÊúâ ${failedFiles.length - 10} ‰∏™Â§±Ë¥•Êñá‰ª∂` : '';
                showWarning(`ÈÉ®ÂàÜÂØºÂÖ•ÊàêÂäüÔºö${importedCount}/${totalFiles} Âº†ÁÖßÁâá\n\nÂ§±Ë¥•ÁöÑÊñá‰ª∂Ôºö\n${failedList}${moreText}`);
            } else {
                showSuccess(`ÊàêÂäüÂØºÂÖ• ${importedCount} Âº†ÁÖßÁâáÔºÅ\n\nËØ∑ÊâãÂä®ÁÇπÂáª"ÊâπÈáèÂ§ÑÁêÜ"ÊåâÈíÆËøõË°åÊô∫ËÉΩÂàÜÊûê„ÄÇ`);
            }
            
            // ÈáçÊñ∞Âä†ËΩΩÁÖßÁâáÂàóË°®
            await loadPhotos();
            // ÂÖ≥Èó≠ÂØºÂÖ•Ê®°ÊÄÅÊ°Ü
            const modal = bootstrap.Modal.getInstance(elements.importModal);
            if (modal) {
                modal.hide();
            }
        } else {
            // Ê†πÊçÆÈîôËØØÁ±ªÂûãÊòæÁ§∫‰∏çÂêåÁöÑÈîôËØØ‰ø°ÊÅØ
            const errorMessage = data.message || 'Êñá‰ª∂Â§πÂØºÂÖ•Â§±Ë¥•';
            showError(`Êñá‰ª∂Â§πÂØºÂÖ•Â§±Ë¥•Ôºö${errorMessage}`);
        }
    } catch (error) {
        console.error('Êñá‰ª∂Â§πÂØºÂÖ•Â§±Ë¥•:', error);
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            showError('ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊúçÂä°Âô®ÊòØÂê¶Ê≠£Â∏∏ËøêË°å');
        } else {
            showError(`Êñá‰ª∂Â§πÂØºÂÖ•Â§±Ë¥•Ôºö${error.message}\n\nËØ∑Á®çÂêéÈáçËØïÊàñÊ£ÄÊü•ÁΩëÁªúËøûÊé•`);
        }
    } finally {
        elements.importProgress.classList.add('d-none');
        elements.startImportBtn.disabled = false;
        elements.importStatus.textContent = 'Ê≠£Âú®ÂØºÂÖ•...';
    }
}

async function monitorScanProgress(taskId, totalFiles) {
    /**
     * ÁõëÊéßÊâ´Êèè‰ªªÂä°ËøõÂ∫¶
     * 
     * @param {string} taskId - ‰ªªÂä°ID
     * @param {number} totalFiles - ÊÄªÊñá‰ª∂Êï∞
     */
    let checkCount = 0;
    const maxChecks = 300; // ÊúÄÂ§öÊ£ÄÊü•300Ê¨°ÔºåÊØèÊ¨°2ÁßíÔºåÊÄªÂÖ±10ÂàÜÈíü
    
    const progressInterval = setInterval(async () => {
        checkCount++;
        
        try {
            const response = await fetch(`${CONFIG.API_BASE_URL}/import/scan-status/${taskId}`);
            const statusData = await response.json();
            
            if (response.ok) {
                const progress = statusData.progress_percentage || 0;
                const processed = statusData.processed_files || 0;
                const imported = statusData.imported_count || 0;
                const failed = statusData.failed_files || [];
                
                // Êõ¥Êñ∞ËøõÂ∫¶ÊòæÁ§∫
                elements.importStatus.textContent = `Ê≠£Âú®Â§ÑÁêÜ... ${processed}/${totalFiles} (${progress.toFixed(1)}%)`;
                
                if (statusData.status === 'completed') {
                    clearInterval(progressInterval);
                    
                    // Â§ÑÁêÜÂÆåÊàê
                    if (failed.length > 0) {
                        const failedList = failed.slice(0, 10).map(f => `‚Ä¢ ${f}`).join('\n');
                        const moreText = failed.length > 10 ? `\n... ËøòÊúâ ${failed.length - 10} ‰∏™Â§±Ë¥•Êñá‰ª∂` : '';
                        showWarning(`ÂêéÂè∞ÂØºÂÖ•ÂÆåÊàêÔºöÊàêÂäü ${imported}/${totalFiles} Âº†ÁÖßÁâá\n\nÂ§±Ë¥•ÁöÑÊñá‰ª∂Ôºö\n${failedList}${moreText}`);
                    } else {
                        showSuccess(`ÂêéÂè∞ÂØºÂÖ•ÂÆåÊàêÔºöÊàêÂäüÂØºÂÖ• ${imported} Âº†ÁÖßÁâáÔºÅ\n\nËØ∑ÊâãÂä®ÁÇπÂáª"ÊâπÈáèÂ§ÑÁêÜ"ÊåâÈíÆËøõË°åÊô∫ËÉΩÂàÜÊûê„ÄÇ`);
                    }
                    
                    // ÈáçÊñ∞Âä†ËΩΩÁÖßÁâáÂàóË°®
                    await loadPhotos();
                    // ÂÖ≥Èó≠ÂØºÂÖ•Ê®°ÊÄÅÊ°Ü
                    const modal = bootstrap.Modal.getInstance(elements.importModal);
                    if (modal) {
                        modal.hide();
                    }
                    
                    // ÈöêËóèËøõÂ∫¶Êù°
                    elements.importProgress.classList.add('d-none');
                    elements.startImportBtn.disabled = false;
                    elements.importStatus.textContent = 'Ê≠£Âú®ÂØºÂÖ•...';
                    
                } else if (statusData.status === 'failed') {
                    clearInterval(progressInterval);
                    showError(`ÂêéÂè∞ÂØºÂÖ•Â§±Ë¥•Ôºö${statusData.error || 'Êú™Áü•ÈîôËØØ'}`);
                    
                    // ÈöêËóèËøõÂ∫¶Êù°
                    elements.importProgress.classList.add('d-none');
                    elements.startImportBtn.disabled = false;
                    elements.importStatus.textContent = 'Ê≠£Âú®ÂØºÂÖ•...';
                }
            } else {
                console.error('Ëé∑ÂèñÊâ´ÊèèÁä∂ÊÄÅÂ§±Ë¥•:', statusData);
            }
            
        } catch (error) {
            console.error('ÁõëÊéßÊâ´ÊèèËøõÂ∫¶Â§±Ë¥•:', error);
        }
        
        // Ë∂ÖÊó∂Ê£ÄÊü•
        if (checkCount >= maxChecks) {
            clearInterval(progressInterval);
            showWarning('Êâ´Êèè‰ªªÂä°Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•‰ªªÂä°Áä∂ÊÄÅÊàñÈáçÊñ∞Â∞ùËØï');
            elements.importProgress.classList.add('d-none');
            elements.startImportBtn.disabled = false;
            elements.importStatus.textContent = 'Ê≠£Âú®ÂØºÂÖ•...';
        }
        
    }, 2000); // ÊØè2ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
}

async function startBatchProcess() {
    console.log('ÂºÄÂßãÊâπÈáèÂ§ÑÁêÜ');
    console.log('ÊâπÈáèÂ§ÑÁêÜÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂Ëß¶Âèë');
    
    // Ëé∑ÂèñÈÄâ‰∏≠ÁöÑÂ§ÑÁêÜÈÄâÈ°π
    const enableAIAnalysis = document.getElementById('enableAIAnalysis').checked;
    const enableQualityAssessment = document.getElementById('enableQualityAssessment').checked;
    const enableClassification = document.getElementById('enableClassification').checked;
    
    // Ê£ÄÊü•ÊòØÂê¶Ëá≥Â∞ëÈÄâÊã©‰∫Ü‰∏Ä‰∏™ÈÄâÈ°π
    if (!enableAIAnalysis && !enableQualityAssessment && !enableClassification) {
        showWarning('ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™Â§ÑÁêÜÈÄâÈ°π');
        return;
    }
    
    // ÊòæÁ§∫ËøõÂ∫¶
    elements.batchProgress.classList.remove('d-none');
    elements.startBatchBtn.disabled = true;
    elements.batchProgressBar.style.width = '0%';
    elements.batchStatus.textContent = 'Ê≠£Âú®ÂáÜÂ§áÊâπÈáèÂ§ÑÁêÜ...';
    
    try {
        // È¶ñÂÖàËé∑ÂèñÊâÄÊúâÁÖßÁâáÁöÑID
        const photosResponse = await fetch(`${CONFIG.API_BASE_URL}/photos?limit=1000`);
        const photosData = await photosResponse.json();
        
        if (!photosResponse.ok) {
            showError('Ëé∑ÂèñÁÖßÁâáÂàóË°®Â§±Ë¥•');
            return;
        }
        
        const photoIds = photosData.photos.map(photo => photo.id);
        
        if (photoIds.length === 0) {
            showWarning('Ê≤°ÊúâÊâæÂà∞ÈúÄË¶ÅÂ§ÑÁêÜÁöÑÁÖßÁâá');
            return;
        }
        
        // ÊûÑÂª∫ÂàÜÊûêÁ±ªÂûãÂàóË°®
        const analysisTypes = [];
        if (enableAIAnalysis) analysisTypes.push('content');
        if (enableQualityAssessment) analysisTypes.push('quality');
        if (enableClassification) analysisTypes.push('duplicate');
        
        const response = await fetch(`${CONFIG.API_BASE_URL}/analysis/batch-analyze`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                photo_ids: photoIds,
                analysis_types: analysisTypes
            })
        });
        
        const data = await response.json();
        
        // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶ÊàêÂäüÔºàÊâπÈáèÂàÜÊûêAPIËøîÂõûBatchAnalysisResponseÊ†ºÂºèÔºâ
        if (response.ok && data.total_photos > 0) {
            showSuccess(`ÊâπÈáèÂ§ÑÁêÜÂ∑≤ÂºÄÂßãÔºåÊ≠£Âú®Â§ÑÁêÜ ${data.total_photos} Âº†ÁÖßÁâá`);
            
            // ‰øùÂ≠òÂàùÂßãÊÄªÊï∞ÔºåÁî®‰∫éËøõÂ∫¶Êù°ËÆ°ÁÆó
            const initialTotal = data.total_photos;
            
            // ‰ΩøÁî®ÁúüÂÆûÁöÑÁä∂ÊÄÅÊ£ÄÊü•API
            let checkCount = 0;
            const maxChecks = 120; // ÊúÄÂ§öÊ£ÄÊü•120Ê¨°ÔºåÊØèÊ¨°1ÁßíÔºåÊÄªÂÖ±2ÂàÜÈíü
            
            const statusCheckInterval = setInterval(async () => {
                checkCount++;
                
                try {
                    // Ë∞ÉÁî®ÁúüÂÆûÁöÑÁä∂ÊÄÅÊ£ÄÊü•APIÔºå‰º†ÈÄíÂàùÂßãÊÄªÊï∞
                    const statusResponse = await fetch(`${CONFIG.API_BASE_URL}/analysis/queue/status?initial_total=${initialTotal}`);
                    const statusData = await statusResponse.json();
                    
                    console.log('Â§ÑÁêÜÁä∂ÊÄÅ:', statusData);
                    
                    // Êõ¥Êñ∞ËøõÂ∫¶Êù°
                    const progress = Math.min(statusData.progress_percentage || 0, 95);
                    elements.batchProgressBar.style.width = `${progress}%`;
                    elements.batchStatus.textContent = `Ê≠£Âú®Â§ÑÁêÜ... ${Math.round(progress)}% (${statusData.batch_completed_photos}/${statusData.batch_total_photos})`;
                    
                    // Ê£ÄÊü•ÊòØÂê¶ÂÆåÊàê
                    if (statusData.is_complete || statusData.processing_photos === 0) {
                        clearInterval(statusCheckInterval);
                        elements.batchProgressBar.style.width = '100%';
                        elements.batchStatus.textContent = 'ÊâπÈáèÂ§ÑÁêÜÂÆåÊàêÔºÅ';
                        showSuccess('ÊâπÈáèÂ§ÑÁêÜÂÆåÊàêÔºÅ');
                        
                        // ÈáçÁΩÆÊåâÈíÆÁä∂ÊÄÅ
                        elements.startBatchBtn.disabled = false;
                        
                        // Á≠âÂæÖ2ÁßíÁ°Æ‰øùÊï∞ÊçÆÂ∫ì‰∫ãÂä°ÂÆåÊàêÔºåÁÑ∂ÂêéÂà∑Êñ∞ÁÖßÁâáÂàóË°®
                        setTimeout(async () => {
                            console.log('ÈáçÊñ∞Âä†ËΩΩÁÖßÁâáÂàóË°®...');
                            await loadPhotos();
                            console.log('ÁÖßÁâáÂàóË°®ÈáçÊñ∞Âä†ËΩΩÂÆåÊàê');
                            // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
                            const modal = bootstrap.Modal.getInstance(elements.batchModal);
                            modal.hide();
                        }, 2000);
                        return;
                    }
                    
                    // Ë∂ÖÊó∂‰øùÊä§
                    if (checkCount >= maxChecks) {
                        clearInterval(statusCheckInterval);
                        elements.batchProgressBar.style.width = '100%';
                        elements.batchStatus.textContent = 'ÊâπÈáèÂ§ÑÁêÜÂÆåÊàêÔºÅ';
                        showSuccess('ÊâπÈáèÂ§ÑÁêÜÂÆåÊàêÔºÅ');
                        
                        // ÈáçÁΩÆÊåâÈíÆÁä∂ÊÄÅ
                        elements.startBatchBtn.disabled = false;
                        
                        // Á≠âÂæÖ3ÁßíÁ°Æ‰øùÊï∞ÊçÆÂ∫ì‰∫ãÂä°ÂÆåÊàêÔºåÁÑ∂ÂêéÂà∑Êñ∞ÁÖßÁâáÂàóË°®
                        setTimeout(async () => {
                            console.log('ÈáçÊñ∞Âä†ËΩΩÁÖßÁâáÂàóË°®...');
                            await loadPhotos();
                            console.log('ÁÖßÁâáÂàóË°®ÈáçÊñ∞Âä†ËΩΩÂÆåÊàê');
                            // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
                            const modal = bootstrap.Modal.getInstance(elements.batchModal);
                            modal.hide();
                        }, 3000);
                    }
                    
                } catch (error) {
                    console.error('Ê£ÄÊü•Â§ÑÁêÜÁä∂ÊÄÅÂ§±Ë¥•:', error);
                    // Â¶ÇÊûúAPIË∞ÉÁî®Â§±Ë¥•ÔºåÁªßÁª≠Á≠âÂæÖ
                }
            }, 1000); // ÊØè1ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
            
        } else {
            // Ê£ÄÊü•ÊòØÂê¶ÊòØÂõ†‰∏∫Ê≤°ÊúâÈúÄË¶ÅÂ§ÑÁêÜÁöÑÁÖßÁâá
            if (data.total_photos === 0) {
                showSuccess('ÊâÄÊúâÁÖßÁâáÈÉΩÂ∑≤ÂÆåÊàêÊô∫ËÉΩÂ§ÑÁêÜÔºåÊó†ÈúÄÈáçÂ§çÂ§ÑÁêÜÔºÅ');
            } else {
                showError(data.detail || data.message || 'ÊâπÈáèÂ§ÑÁêÜÂêØÂä®Â§±Ë¥•');
            }
            // ÈáçÁΩÆÊåâÈíÆÁä∂ÊÄÅ
            elements.startBatchBtn.disabled = false;
            elements.batchProgress.classList.add('d-none');
        }
    } catch (error) {
        console.error('ÊâπÈáèÂ§ÑÁêÜÂ§±Ë¥•:', error);
        showError('ÊâπÈáèÂ§ÑÁêÜÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
        // ÈáçÁΩÆÊåâÈíÆÁä∂ÊÄÅ
        elements.startBatchBtn.disabled = false;
        elements.batchProgress.classList.add('d-none');
    } finally {
        // Ê≥®ÊÑèÔºöÊàêÂäüÊó∂ÊåâÈíÆÁä∂ÊÄÅÂú®ËøõÂ∫¶ÂÆåÊàêÂêéÈáçÁΩÆ
    }
}

function selectAllPhotos() {
    console.log('ÂÖ®ÈÄâÁÖßÁâá');
    if (window.PhotoManager) {
        window.PhotoManager.selectAllPhotos();
    } else {
        console.error('PhotoManager Êú™ÂàùÂßãÂåñ');
        showError('ÁÖßÁâáÁÆ°ÁêÜÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
    }
}

function clearSelection() {
    console.log('ÂèñÊ∂àÈÄâÊã©');
    if (window.PhotoManager) {
        window.PhotoManager.clearSelection();
    } else {
        console.error('PhotoManager Êú™ÂàùÂßãÂåñ');
        showError('ÁÖßÁâáÁÆ°ÁêÜÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
    }
}

function deleteSelectedPhotos() {
    console.log('Âà†Èô§ÈÄâ‰∏≠ÁÖßÁâá');
    if (window.PhotoManager) {
        const selectedIds = window.PhotoManager.getSelectedPhotoIds();
        if (selectedIds.length > 0) {
            window.PhotoManager.deletePhotos(selectedIds);
        } else {
            showWarning('ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÁÖßÁâá');
        }
    } else {
        console.error('PhotoManager Êú™ÂàùÂßãÂåñ');
        showError('ÁÖßÁâáÁÆ°ÁêÜÂô®Êú™ÂàùÂßãÂåñÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
    }
}


function switchSection(section) {
    console.log('üìÑ ÂàáÊç¢Âà∞È°µÈù¢:', section);
    
    // Êõ¥Êñ∞ÂØºËà™Áä∂ÊÄÅ
    updateNavigation(section);
    
    // Ê†πÊçÆÈ°µÈù¢ÊòæÁ§∫‰∏çÂêåÂÜÖÂÆπ
    switch(section) {
        case 'photos':
            showPhotosSection();
            break;
        default:
            showPhotosSection();
    }
}

function updateNavigation(activeSection) {
    // ÁßªÈô§ÊâÄÊúâÂØºËà™È°πÁöÑÊøÄÊ¥ªÁä∂ÊÄÅ
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    
    // ÊøÄÊ¥ªÂΩìÂâçÂØºËà™È°π
    const activeLink = document.querySelector(`[data-section="${activeSection}"]`);
    if (activeLink) {
        activeLink.classList.add('active');
    }
}

function showPhotosSection() {
    // ÊòæÁ§∫ÁÖßÁâáÁΩëÊ†ºÂå∫Âüü
    const mainContent = document.querySelector('.row:has(.col-md-9)');
    if (mainContent) {
        mainContent.style.display = 'block';
    }
    
    // Âä†ËΩΩÁÖßÁâáÊï∞ÊçÆ
    loadPhotos();
}


// Ê≥®ÊÑèÔºötoggleTags ÂáΩÊï∞Â∑≤ÁßªËá≥ app-ui.js

// ============ ÂÖ®Â±ÄÂØºÂá∫ ============

window.PhotoApp = {
    loadPhotos,
    loadStats,
    showError
};

window.toggleTags = toggleTags;
window.selectSuggestion = selectSuggestion;
